// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["darwin", "darwin-arm64", "debian-openssl-1.0.x", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "rhel-openssl-1.0.x", "rhel-openssl-1.1.x", "rhel-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "linux-arm64-openssl-1.0.x", "linux-arm64-openssl-3.0.x", "linux-arm-openssl-1.1.x", "linux-arm-openssl-1.0.x", "linux-arm-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-1.1.x", "linux-musl-arm64-openssl-3.0.x", "linux-nixos", "linux-static-x64", "linux-static-arm64", "windows", "freebsd11", "freebsd12", "freebsd13", "openbsd", "netbsd", "arm", "native"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Anamnesis {
  id                              String    @id @default(uuid())
  athleteId                       String
  trainnerId                      String
  isAlcoholic                     Boolean
  isSmoker                        Boolean
  sleepQuality                    String
  PhysicalActivityHabits          String
  HydrationHabits                 String
  EatingHabits                    String
  AmountWater                     Float
  UseFoodSupplement               String
  isAnemic                        Boolean
  isDiabetic                      Boolean
  systolicBloodPressure           Int
  diastolicBloodPressure          Int
  restingHeartRate                Int
  heartProblems                   String?
  allergies                       String?
  otherDiseases                   String?
  medicalTreatments               String?
  medicationUse                   String?
  UseHealthDevice                 String?
  haveAnxiety                     Boolean
  haveDepression                  Boolean
  haveBipolarDisorder             Boolean
  haveObsessiveCompulsiveDisorder Boolean
  haveOtherDisorders              Boolean
  additionalObservations          String?

  // Default
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  // Relations
  trainner Trainer @relation(fields: [trainnerId], references: [id])
  athlete  Athlete @relation(fields: [athleteId], references: [id])

  @@map("anamenesis")
}

model Athlete {
  id           String    @id @default(uuid())
  passwordHash String
  name         String
  surname      String
  phone        String
  email        String    @unique
  sex          String
  addressId    String
  trainnerId   String?
  observation  String?
  birthDate    DateTime

  // Default
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  // Relations
  address       Address?
  trainner      Trainer?        @relation(fields: [trainnerId], references: [id])
  anamnesis     Anamnesis[]
  BodyValuation BodyValuation[]

  @@map("athlete")
}

model Address {
  id            String @id @default(uuid())
  address       String
  addressNumber String
  city          String
  state         String
  cep           String
  athleteId     String @unique

  // Default
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  // Relations
  Athlete Athlete @relation(fields: [athleteId], references: [id])

  @@map("address")
}

model BodyValuation {
  id         String @id @default(uuid())
  athleteId  String
  trainnerId String

  // Default
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  // RELATIONS
  trainner Trainer? @relation(fields: [trainnerId], references: [id])
  athlete  Athlete  @relation(fields: [athleteId], references: [id])

  @@map("body-valuation")
}

model Trainer {
  id           String @id @default(uuid())
  name         String
  surname      String
  passwordHash String
  phone        String

  // Default
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  athletes      Athlete[]
  Anamnesis     Anamnesis[]
  BodyValuation BodyValuation[]

  @@map("trainer")
}

model Exercise {
  id String @id @default(uuid())

  // Default
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@map("exercise")
}

model FlexEvaluation {
  id String @id @default(uuid())

  // Default
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@map("flex-evaluation")
}

model MethodExercise {
  id String @id @default(uuid())

  // Default
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@map("method-exercise")
}

model StatusPhoto {
  id String @id @default(uuid())

  // Default
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@map("status-photo")
}

model Target {
  id String @id @default(uuid())

  // Default
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@map("target")
}

model Training {
  id String @id @default(uuid())

  // Default
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@map("training")
}

model TrainingEvolution {
  id String @id @default(uuid())

  // Default
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@map("training-evolution")
}

// @ campo
// @@ tabela
