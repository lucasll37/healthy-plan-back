
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.4.2
 * Query Engine version: ac9d7041ed77bcc8a8dbd2ab6616b39013829574
 */
Prisma.prismaVersion = {
  client: "5.4.2",
  engine: "ac9d7041ed77bcc8a8dbd2ab6616b39013829574"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AnamnesisScalarFieldEnum = {
  id: 'id',
  athleteId: 'athleteId',
  isAlcoholic: 'isAlcoholic',
  isSmoker: 'isSmoker',
  sleepQuality: 'sleepQuality',
  PhysicalActivityHabits: 'PhysicalActivityHabits',
  HydrationHabits: 'HydrationHabits',
  EatingHabits: 'EatingHabits',
  AmountWater: 'AmountWater',
  UseFoodSupplement: 'UseFoodSupplement',
  isAnemic: 'isAnemic',
  isDiabetic: 'isDiabetic',
  systolicBloodPressure: 'systolicBloodPressure',
  diastolicBloodPressure: 'diastolicBloodPressure',
  restingHeartRate: 'restingHeartRate',
  heartProblems: 'heartProblems',
  allergies: 'allergies',
  otherDiseases: 'otherDiseases',
  medicalTreatments: 'medicalTreatments',
  medicationUse: 'medicationUse',
  UseHealthDevice: 'UseHealthDevice',
  haveAnxiety: 'haveAnxiety',
  haveDepression: 'haveDepression',
  haveBipolarDisorder: 'haveBipolarDisorder',
  haveObsessiveCompDisorder: 'haveObsessiveCompDisorder',
  haveOtherDisorders: 'haveOtherDisorders',
  additionalObservations: 'additionalObservations',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AthleteScalarFieldEnum = {
  id: 'id',
  name: 'name',
  surname: 'surname',
  phone: 'phone',
  email: 'email',
  avatar: 'avatar',
  sex: 'sex',
  observation: 'observation',
  birthDate: 'birthDate',
  trainerId: 'trainerId',
  addressId: 'addressId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  addressInfo: 'addressInfo',
  addressNumber: 'addressNumber',
  city: 'city',
  state: 'state',
  cep: 'cep',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrainerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  surname: 'surname',
  email: 'email',
  password: 'password',
  phone: 'phone',
  avatar: 'avatar',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BodyEvaluationScalarFieldEnum = {
  id: 'id',
  ageAtTheMoment: 'ageAtTheMoment',
  fatMass_kg: 'fatMass_kg',
  leanMass_kg: 'leanMass_kg',
  weight_cm: 'weight_cm',
  height_kg: 'height_kg',
  bodyMassIndex: 'bodyMassIndex',
  bodyMassClass: 'bodyMassClass',
  skeletalMass: 'skeletalMass',
  bodyAge: 'bodyAge',
  basalMetabolicRate: 'basalMetabolicRate',
  waistRatioHip: 'waistRatioHip',
  visceralFat: 'visceralFat',
  neck_circ_cm: 'neck_circ_cm',
  chest_circ_cm: 'chest_circ_cm',
  rightForearm_circ_cm: 'rightForearm_circ_cm',
  leftForearm_circ_cm: 'leftForearm_circ_cm',
  rightArm_circ_cm: 'rightArm_circ_cm',
  leftArm_circ_cm: 'leftArm_circ_cm',
  waist_circ_cm: 'waist_circ_cm',
  abdomen_circ_cm: 'abdomen_circ_cm',
  hip_circ_cm: 'hip_circ_cm',
  rightThigh_circ_cm: 'rightThigh_circ_cm',
  leftThigh_circ_cm: 'leftThigh_circ_cm',
  rightCalf_circ_cm: 'rightCalf_circ_cm',
  leftCalf_circ_cm: 'leftCalf_circ_cm',
  fatPercentage: 'fatPercentage',
  athleteId: 'athleteId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExerciseScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FlexEvaluationScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MethodExerciseScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StatusPhotoScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TargetScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrainingScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrainingEvolutionScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Anamnesis: 'Anamnesis',
  Athlete: 'Athlete',
  Address: 'Address',
  Trainer: 'Trainer',
  BodyEvaluation: 'BodyEvaluation',
  Exercise: 'Exercise',
  FlexEvaluation: 'FlexEvaluation',
  MethodExercise: 'MethodExercise',
  StatusPhoto: 'StatusPhoto',
  Target: 'Target',
  Training: 'Training',
  TrainingEvolution: 'TrainingEvolution'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
