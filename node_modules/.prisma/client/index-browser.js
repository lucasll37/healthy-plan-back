
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 5.1.0
 * Query Engine version: a9b7003df90aa623086e4d6f4e43c72468e6339b
 */
Prisma.prismaVersion = {
  client: "5.1.0",
  engine: "a9b7003df90aa623086e4d6f4e43c72468e6339b"
}


const runtimeDescription = (() => {
  // https://edge-runtime.vercel.app/features/available-apis#addressing-the-runtime
  if ("EdgeRuntime" in globalThis && typeof globalThis.EdgeRuntime === "string") {
    return "under the Vercel Edge Runtime";
  }
  // Deno
  if ("Deno" in globalThis && typeof globalThis.Deno === "object") {
    return "under the Deno runtime";
  }
  // Default to assuming browser
  return "in the browser";
})();


Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AnamnesisScalarFieldEnum = {
  id: 'id',
  athleteId: 'athleteId',
  trainnerId: 'trainnerId',
  isAlcoholic: 'isAlcoholic',
  isSmoker: 'isSmoker',
  sleepQuality: 'sleepQuality',
  PhysicalActivityHabits: 'PhysicalActivityHabits',
  HydrationHabits: 'HydrationHabits',
  EatingHabits: 'EatingHabits',
  AmountWater: 'AmountWater',
  UseFoodSupplement: 'UseFoodSupplement',
  isAnemic: 'isAnemic',
  isDiabetic: 'isDiabetic',
  systolicBloodPressure: 'systolicBloodPressure',
  diastolicBloodPressure: 'diastolicBloodPressure',
  restingHeartRate: 'restingHeartRate',
  heartProblems: 'heartProblems',
  allergies: 'allergies',
  otherDiseases: 'otherDiseases',
  medicalTreatments: 'medicalTreatments',
  medicationUse: 'medicationUse',
  UseHealthDevice: 'UseHealthDevice',
  haveAnxiety: 'haveAnxiety',
  haveDepression: 'haveDepression',
  haveBipolarDisorder: 'haveBipolarDisorder',
  haveObsessiveCompulsiveDisorder: 'haveObsessiveCompulsiveDisorder',
  haveOtherDisorders: 'haveOtherDisorders',
  additionalObservations: 'additionalObservations',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AthleteScalarFieldEnum = {
  id: 'id',
  passwordHash: 'passwordHash',
  name: 'name',
  surname: 'surname',
  phone: 'phone',
  email: 'email',
  sex: 'sex',
  addressId: 'addressId',
  trainnerId: 'trainnerId',
  observation: 'observation',
  birthDate: 'birthDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  address: 'address',
  addressNumber: 'addressNumber',
  city: 'city',
  state: 'state',
  cep: 'cep',
  athleteId: 'athleteId'
};

exports.Prisma.BodyValuationScalarFieldEnum = {
  id: 'id',
  athleteId: 'athleteId',
  trainnerId: 'trainnerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrainerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  surname: 'surname',
  passwordHash: 'passwordHash',
  phone: 'phone'
};

exports.Prisma.ExerciseScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.FlexEvaluationScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.MethodExerciseScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.StatusPhotoScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.TargetScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.TrainingScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.TrainingEvolutionScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Anamnesis: 'Anamnesis',
  Athlete: 'Athlete',
  Address: 'Address',
  BodyValuation: 'BodyValuation',
  Trainer: 'Trainer',
  Exercise: 'Exercise',
  FlexEvaluation: 'FlexEvaluation',
  MethodExercise: 'MethodExercise',
  StatusPhoto: 'StatusPhoto',
  Target: 'Target',
  Training: 'Training',
  TrainingEvolution: 'TrainingEvolution'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
